name: Build release

on:
  push:
    tags:
      - "*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true

env:
  JAVA_VERSION: '21'
  JAVA_DISTRO: 'temurin'

jobs:
  build:
    name: graalVM ${{ matrix.version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        version: [ latest ]   # Append other graalVM versions as needed; e.g. [latest, dev, '22.0.0.2']
        os: [ macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{ matrix.version }}
          java-version: ${{ env.JAVA_VERSION }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Cache Maven'
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 'Build Native Image'
        run: mvn -B --file pom.xml "-DreleaseVersion=${{ github.ref_name }}" clean package -Pnative

      - name: 'Create distribution'
        run: mvn -B --file pom.xml "-DreleaseVersion=${{ github.ref_name }}" -Pdist package -DskipTests

      - name: 'Upload Distribution'
        uses: actions/upload-artifact@v4
        with:
          name: distributions
          path: |
            target/distributions


  release:
    needs: [ build ]
    name: 'Create Release'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Set up JDK'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: 'Cache Maven'
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          name: distributions
          path: target/distributions

      - name: 'List Distributions'
        run: |
          ls -al target/distributions

      - name: Release
        uses: jreleaser/release-action@v2
        with:
          arguments: full-release -PartifactsDir=target/distributions
        env:
          JRELEASER_PROJECT_VERSION: ${{ github.ref_name }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Save JReleaser output'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-logs
          path: |
            out
